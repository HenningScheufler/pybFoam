from typing import Any, ClassVar, List

from typing import overload
import numpy

class Time:
    @overload
    def __init__(self, arg0: Time) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str) -> None: ...
    def setTime(self, arg0, arg1: int) -> None: ...
    def value(self) -> float: ...

class Word:
    __hash__: ClassVar[None] = ...
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, arg0: str) -> bool: ...

class dictionary:
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: dictionary) -> None: ...
    @overload
    def add(self, arg0: entry, arg1: bool) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def add(self, arg0: str, arg1: float) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def add(self, arg0: str, arg1) -> None: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear(self) -> None: ...
    def get_scalar(self, arg0: str) -> float: ...
    def get_scalarField(self, *args, **kwargs) -> Any: ...
    def get_tensor(self, *args, **kwargs) -> Any: ...
    def get_tensorField(self, *args, **kwargs) -> Any: ...
    def get_vector(self, *args, **kwargs) -> Any: ...
    def get_vectorField(self, *args, **kwargs) -> Any: ...
    def get_word(self, *args, **kwargs) -> Any: ...
    def get_wordList(self, *args, **kwargs) -> Any: ...
    def isDict(self, arg0: str) -> bool: ...
    def print(self) -> None: ...
    def read(self, *args, **kwargs) -> Any: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    @overload
    def set(self, arg0: str, arg1: float) -> None: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    @overload
    def set(self, arg0: str, arg1) -> None: ...
    def subDict(self, arg0: str) -> dictionary: ...
    def subDictOrAdd(self, arg0: str) -> dictionary: ...
    def toc(self, *args, **kwargs) -> Any: ...
    def write(self, arg0: str) -> None: ...

class dictionaryEntry(entry):
    def __init__(self, arg0: keyType, arg1, arg2) -> None: ...

class entry:
    def __init__(self, *args, **kwargs) -> None: ...

class fvMesh:
    @overload
    def __init__(self, arg0: fvMesh) -> None: ...
    @overload
    def __init__(self, arg0: Time) -> None: ...
    def C(self, *args, **kwargs) -> Any: ...
    def Cf(self, *args, **kwargs) -> Any: ...
    def Sf(self, *args, **kwargs) -> Any: ...
    def magSf(self, *args, **kwargs) -> Any: ...
    def time(self) -> Time: ...

class instant:
    def __init__(self, *args, **kwargs) -> None: ...

class instantList:
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, arg0: int) -> instant: ...

class keyType:
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...

class scalarField:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: scalarField) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0: List[float]) -> None: ...
    def from_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    def to_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    @overload
    def __add__(self, arg0: scalarField) -> scalarField: ...
    @overload
    def __add__(self, arg0: float) -> scalarField: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg0: float) -> scalarField: ...
    @overload
    def __mul__(self, arg0: scalarField) -> scalarField: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __sub__(self, arg0: scalarField) -> scalarField: ...
    @overload
    def __sub__(self, arg0: float) -> scalarField: ...
    @overload
    def __truediv__(self, arg0: float) -> scalarField: ...
    @overload
    def __truediv__(self, arg0: scalarField) -> scalarField: ...

class surfaceScalarField:
    @overload
    def __init__(self, arg0: surfaceScalarField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_surfaceScalarField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> scalarField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: surfaceScalarField) -> tmp_surfaceScalarField: ...
    def __getitem__(self, arg0: str) -> scalarField: ...
    def __mul__(self, arg0: surfaceScalarField) -> tmp_surfaceScalarField: ...
    def __setitem__(self, arg0: str, arg1: scalarField) -> None: ...
    def __sub__(self, arg0: surfaceScalarField) -> tmp_surfaceScalarField: ...
    def __truediv__(self, arg0: surfaceScalarField) -> tmp_surfaceScalarField: ...

class surfaceTensorField:
    @overload
    def __init__(self, arg0: surfaceTensorField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_surfaceTensorField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> tensorField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: surfaceTensorField) -> tmp_surfaceTensorField: ...
    def __getitem__(self, arg0: str) -> tensorField: ...
    def __mul__(self, arg0: surfaceScalarField) -> tmp_surfaceTensorField: ...
    def __setitem__(self, arg0: str, arg1: tensorField) -> None: ...
    def __sub__(self, arg0: surfaceTensorField) -> tmp_surfaceTensorField: ...
    def __truediv__(self, arg0: surfaceScalarField) -> tmp_surfaceTensorField: ...

class surfaceVectorField:
    @overload
    def __init__(self, arg0: surfaceVectorField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_surfaceVectorField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> vectorField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: surfaceVectorField) -> tmp_surfaceVectorField: ...
    def __getitem__(self, arg0: str) -> vectorField: ...
    def __mul__(self, arg0: surfaceScalarField) -> tmp_surfaceVectorField: ...
    def __setitem__(self, arg0: str, arg1: vectorField) -> None: ...
    def __sub__(self, arg0: surfaceVectorField) -> tmp_surfaceVectorField: ...
    def __truediv__(self, arg0: surfaceScalarField) -> tmp_surfaceVectorField: ...

class symmTensor:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self, arg0: symmTensor) -> None: ...
    @overload
    def __init__(self, arg0: List[float[6]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...
    def __add__(self, arg0: symmTensor) -> symmTensor: ...
    @overload
    def __and__(self, arg0: symmTensor) -> tensor: ...
    @overload
    def __and__(self, arg0: vector) -> vector: ...
    @overload
    def __eq__(self, arg0: symmTensor) -> bool: ...
    @overload
    def __eq__(self, arg0: List[float[6]]) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg0: float) -> symmTensor: ...
    def __ne__(self, arg0: symmTensor) -> bool: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    def __sub__(self, arg0: symmTensor) -> symmTensor: ...

class symmTensorField:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: symmTensorField) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0: List[symmTensor]) -> None: ...
    def from_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    def to_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    @overload
    def __add__(self, arg0: symmTensorField) -> symmTensorField: ...
    @overload
    def __add__(self, arg0: symmTensor) -> symmTensorField: ...
    def __getitem__(self, arg0: int) -> symmTensor: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg0: float) -> symmTensorField: ...
    @overload
    def __mul__(self, arg0: scalarField) -> symmTensorField: ...
    def __setitem__(self, arg0: int, arg1: symmTensor) -> None: ...
    @overload
    def __sub__(self, arg0: symmTensorField) -> symmTensorField: ...
    @overload
    def __sub__(self, arg0: symmTensor) -> symmTensorField: ...
    @overload
    def __truediv__(self, arg0: float) -> symmTensorField: ...
    @overload
    def __truediv__(self, arg0: scalarField) -> symmTensorField: ...

class tensor:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self, arg0: tensor) -> None: ...
    @overload
    def __init__(self, arg0: List[float[9]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float) -> None: ...
    def __add__(self, arg0: tensor) -> tensor: ...
    @overload
    def __and__(self, arg0: tensor) -> tensor: ...
    @overload
    def __and__(self, arg0: vector) -> vector: ...
    @overload
    def __eq__(self, arg0: tensor) -> bool: ...
    @overload
    def __eq__(self, arg0: List[float[9]]) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg0: float) -> tensor: ...
    def __ne__(self, arg0: tensor) -> bool: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    def __sub__(self, arg0: tensor) -> tensor: ...

class tensorField:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: tensorField) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0: List[tensor]) -> None: ...
    def from_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    def to_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    @overload
    def __add__(self, arg0: tensorField) -> tensorField: ...
    @overload
    def __add__(self, arg0: tensor) -> tensorField: ...
    def __getitem__(self, arg0: int) -> tensor: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg0: float) -> tensorField: ...
    @overload
    def __mul__(self, arg0: scalarField) -> tensorField: ...
    def __setitem__(self, arg0: int, arg1: tensor) -> None: ...
    @overload
    def __sub__(self, arg0: tensorField) -> tensorField: ...
    @overload
    def __sub__(self, arg0: tensor) -> tensorField: ...
    @overload
    def __truediv__(self, arg0: float) -> tensorField: ...
    @overload
    def __truediv__(self, arg0: scalarField) -> tensorField: ...

class tmp_surfaceScalarField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class tmp_surfaceTensorField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class tmp_surfaceVectorField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class tmp_volScalarField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class tmp_volSymmTensorField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class tmp_volTensorField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class tmp_volVectorField:
    def __init__(self, *args, **kwargs) -> None: ...
    def geoField(self, *args, **kwargs) -> Any: ...

class vector:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self, arg0: vector) -> None: ...
    @overload
    def __init__(self, arg0: List[float[3]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def __add__(self, arg0: vector) -> vector: ...
    @overload
    def __and__(self, arg0: vector) -> float: ...
    @overload
    def __and__(self, arg0) -> vector: ...
    @overload
    def __and__(self, arg0) -> vector: ...
    @overload
    def __eq__(self, arg0: vector) -> bool: ...
    @overload
    def __eq__(self, arg0: List[float[3]]) -> bool: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg0: float) -> vector: ...
    def __ne__(self, arg0: vector) -> bool: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    def __sub__(self, arg0: vector) -> vector: ...

class vectorField:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: vectorField) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0: List[vector]) -> None: ...
    def from_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    def to_numpy(self) -> numpy.ndarray[numpy.float64]: ...
    @overload
    def __add__(self, arg0: vectorField) -> vectorField: ...
    @overload
    def __add__(self, arg0: vector) -> vectorField: ...
    @overload
    def __and__(self, arg0: vector) -> scalarField: ...
    @overload
    def __and__(self, arg0: vectorField) -> scalarField: ...
    @overload
    def __and__(self, arg0: tensor) -> vectorField: ...
    @overload
    def __and__(self, arg0) -> vectorField: ...
    @overload
    def __and__(self, arg0: symmTensor) -> vectorField: ...
    @overload
    def __and__(self, arg0) -> vectorField: ...
    def __getitem__(self, arg0: int) -> vector: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg0: float) -> vectorField: ...
    @overload
    def __mul__(self, arg0: scalarField) -> vectorField: ...
    def __setitem__(self, arg0: int, arg1: vector) -> None: ...
    @overload
    def __sub__(self, arg0: vectorField) -> vectorField: ...
    @overload
    def __sub__(self, arg0: vector) -> vectorField: ...
    @overload
    def __truediv__(self, arg0: float) -> vectorField: ...
    @overload
    def __truediv__(self, arg0: scalarField) -> vectorField: ...

class volScalarField:
    @overload
    def __init__(self, arg0: volScalarField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_volScalarField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> scalarField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: volScalarField) -> tmp_volScalarField: ...
    def __getitem__(self, arg0: str) -> scalarField: ...
    def __mul__(self, arg0: volScalarField) -> tmp_volScalarField: ...
    def __setitem__(self, arg0: str, arg1: scalarField) -> None: ...
    def __sub__(self, arg0: volScalarField) -> tmp_volScalarField: ...
    def __truediv__(self, arg0: volScalarField) -> tmp_volScalarField: ...

class volSymmTensorField:
    @overload
    def __init__(self, arg0: volSymmTensorField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_volSymmTensorField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> symmTensorField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: volSymmTensorField) -> tmp_volSymmTensorField: ...
    def __getitem__(self, arg0: str) -> symmTensorField: ...
    def __mul__(self, arg0: volScalarField) -> tmp_volSymmTensorField: ...
    def __setitem__(self, arg0: str, arg1: symmTensorField) -> None: ...
    def __sub__(self, arg0: volSymmTensorField) -> tmp_volSymmTensorField: ...
    def __truediv__(self, arg0: volScalarField) -> tmp_volSymmTensorField: ...

class volTensorField:
    @overload
    def __init__(self, arg0: volTensorField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_volTensorField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> tensorField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: volTensorField) -> tmp_volTensorField: ...
    def __getitem__(self, arg0: str) -> tensorField: ...
    def __mul__(self, arg0: volScalarField) -> tmp_volTensorField: ...
    def __setitem__(self, arg0: str, arg1: tensorField) -> None: ...
    def __sub__(self, arg0: volTensorField) -> tmp_volTensorField: ...
    def __truediv__(self, arg0: volScalarField) -> tmp_volTensorField: ...

class volVectorField:
    @overload
    def __init__(self, arg0: volVectorField) -> None: ...
    @overload
    def __init__(self, arg0: tmp_volVectorField) -> None: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def internalField(self, arg0: str) -> vectorField: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def read_field(self, *args, **kwargs) -> Any: ...
    def __add__(self, arg0: volVectorField) -> tmp_volVectorField: ...
    def __getitem__(self, arg0: str) -> vectorField: ...
    def __mul__(self, arg0: volScalarField) -> tmp_volVectorField: ...
    def __setitem__(self, arg0: str, arg1: vectorField) -> None: ...
    def __sub__(self, arg0: volVectorField) -> tmp_volVectorField: ...
    def __truediv__(self, arg0: volScalarField) -> tmp_volVectorField: ...

class wordList:
    @overload
    def __init__(self, arg0: wordList) -> None: ...
    @overload
    def __init__(self, arg0: List[str]) -> None: ...
    def list(self) -> List[str]: ...
    def __getitem__(self, arg0: int) -> str: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: int, arg1: str) -> None: ...

@overload
def mag(arg0: float) -> float: ...
@overload
def mag(arg0: vector) -> float: ...
@overload
def mag(arg0: tensor) -> float: ...
@overload
def mag(arg0: volScalarField) -> volScalarField: ...
@overload
def mag(arg0: volVectorField) -> volScalarField: ...
@overload
def mag(arg0: volTensorField) -> volScalarField: ...
@overload
def mag(arg0: volSymmTensorField) -> volScalarField: ...
@overload
def mag(arg0: surfaceScalarField) -> surfaceScalarField: ...
@overload
def mag(arg0: surfaceVectorField) -> surfaceScalarField: ...
@overload
def mag(arg0: surfaceTensorField) -> surfaceScalarField: ...
def selectTimes(*args, **kwargs) -> Any: ...
@overload
def sum(arg0: scalarField) -> float: ...
@overload
def sum(arg0: vectorField) -> vector: ...
@overload
def sum(arg0: tensorField) -> tensor: ...
@overload
def sum(arg0: symmTensorField) -> symmTensor: ...
