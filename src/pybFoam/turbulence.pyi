from typing import Any

class compressibleTurbulenceModel:
    def __init__(self, *args, **kwargs) -> None: ...
    def R(self, *args, **kwargs) -> Any: ...
    def U(self, *args, **kwargs) -> Any: ...
    def alphaRhoPhi(self, *args, **kwargs) -> Any: ...
    def devRhoReff(self, *args, **kwargs) -> Any: ...
    def divDevRhoReff(self, *args, **kwargs) -> Any: ...
    def epsilon(self, *args, **kwargs) -> Any: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def k(self, *args, **kwargs) -> Any: ...
    def mu(self, *args, **kwargs) -> Any: ...
    def muEff(self, *args, **kwargs) -> Any: ...
    def mut(self, *args, **kwargs) -> Any: ...
    def nu(self, *args, **kwargs) -> Any: ...
    def nuEff(self, *args, **kwargs) -> Any: ...
    def nut(self, *args, **kwargs) -> Any: ...
    def omega(self, *args, **kwargs) -> Any: ...
    def phi(self, *args, **kwargs) -> Any: ...
    def y(self, *args, **kwargs) -> Any: ...

class incompressibleTurbulenceModel:
    def __init__(self, *args, **kwargs) -> None: ...
    def R(self, *args, **kwargs) -> Any: ...
    def U(self, *args, **kwargs) -> Any: ...
    def alphaRhoPhi(self, *args, **kwargs) -> Any: ...
    def devRhoReff(self, *args, **kwargs) -> Any: ...
    def divDevReff(self, *args, **kwargs) -> Any: ...
    def epsilon(self, *args, **kwargs) -> Any: ...
    def from_registry(self, *args, **kwargs) -> Any: ...
    def k(self, *args, **kwargs) -> Any: ...
    def mu(self, *args, **kwargs) -> Any: ...
    def muEff(self, *args, **kwargs) -> Any: ...
    def mut(self, *args, **kwargs) -> Any: ...
    def nu(self, *args, **kwargs) -> Any: ...
    def nuEff(self, *args, **kwargs) -> Any: ...
    def nut(self, *args, **kwargs) -> Any: ...
    def omega(self, *args, **kwargs) -> Any: ...
    def phi(self, *args, **kwargs) -> Any: ...
    def y(self, *args, **kwargs) -> Any: ...
